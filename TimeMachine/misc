database.txt






public class Model {

	private static HashMap<Integer, UserItem> userMap = new HashMap<Integer, UserItem>();
	private static HashMap<ListItem, UserItem> taskMap = new HashMap<ListItem, UserItem>();

	private static Connection con;
	private final String DB_URL = "jdbc:mysql://sis-teach-01.sis.pitt.edu:3306/erl67is1017";
	private final String DB_DRIVER = "com.mysql.jdbc.Driver";
	private final String DB_USERNAME = "erl67is1017";
	private final String DB_PASSWORD = "erl67@pitt.edu";
	
	private static Controller controller;

	public Model() {
		try {
			Class.forName(DB_DRIVER).newInstance();
			con = DriverManager.getConnection(DB_URL, DB_USERNAME, DB_PASSWORD);
			pullDbUsers (con);
			pullDbTasks (con);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void pullDbUsers(Connection con) {

		String query = "SELECT * FROM erl67is1017.user ORDER BY lname ASC;";

		try {
			PreparedStatement stmt = con.prepareStatement(query);
			ResultSet rs = stmt.executeQuery();
			System.out.println(stmt.toString());

			while (rs.next()) {
				UserItem user = new UserItem(rs.getInt(1), rs.getString(2), rs.getString(3));
				userMap.put(user.getId(), user);
				//System.out.println("DB:"+rs.getInt(1) + " " + rs.getString(2) + " " + rs.getString(3) + " // Map: " + user.getId()+", " + userMap.get(user.getId()));
				View.getCboUser().addItem(user);
				View.getCboFilter().addItem(user);
			}
			rs.close(); stmt.close();
		} catch (SQLException e) {
			e.printStackTrace();
		} 
	} 

	public static void pullDbTasks(Connection con) {
		String query = "SELECT * FROM todolist JOIN user_todo ON todolist.id = user_todo.fk_todo_id";
		String sort = " ORDER BY todolist.id;";
		//String sort = " ORDER BY user.lname, todolist.id;";	//in the future can add sorting function
		
		try {
			PreparedStatement stmt = con.prepareStatement(query+sort);
			ResultSet rs = stmt.executeQuery();
			System.out.println(stmt.toString());

			while (rs.next()) {

				ListItem item = new ListItem(rs.getString(2), rs.getInt(1), rs.getTimestamp(3));
				
				if (rs.getInt(4) != 0) {	//if task has a parent in the DB
					for (ListItem mapitem: taskMap.keySet()){
						if (mapitem.getId() == rs.getInt(4)) {
							item.setDescription("     " + item.getDescription() + " [subtask of: " + mapitem.getDescription().trim() +"]");
							item.setParent(mapitem);
							mapitem.addChild(item);
							int idx = View.getListModel().indexOf(mapitem);
							View.getListModel().insertElementAt(item, idx+1);
							//View.getListModel().addElement(new ListItem(">>>>" + item.getDescription() + "       [" + taskMap.get(item).lastDotF() + "] ", item.getId(), item.getTimestamp()));
							System.out.println(item + " parent= " + mapitem);
						}		
					}	
				} else {
					//because I wanted the listmodel to also show the user, the listitem displayed is slightly different than the one in the map, it is constructed as below
					//View.getListModel().addElement(new ListItem(item.getDescription() + "       [" + taskMap.get(item).lastDotF() + "] ", item.getId(), item.getTimestamp()));
					
					//uncomment below to show user
					//item.setDescription(item.getDescription() + " [" +  userMap.get(rs.getInt("fk_user_id")).lastDotF() + "]");
					View.getListModel().addElement(item);
					System.out.println(item.getId() + " " + item.getDescription() + " " + item.getTimestamp() + " " + taskMap.get(item) + item.getChildren());	//print task details and value from taskmap(user)	
				}
				taskMap.put(item, userMap.get(rs.getInt("fk_user_id")));
				
				try {	//need to slow down otherwise database will outrun the GUI
					Thread.sleep(50);
				} catch (InterruptedException e) {}
			}
			rs.close(); stmt.close();
		} catch (SQLException e) {
			e.printStackTrace();
		} 
	} 

	public void addListItem(ListItem item, UserItem user, int parentid) {

		if (parentid > 0) {	//if task will have a parent
			try {
				//Enter task into todolist table
				PreparedStatement stmt = con.prepareStatement("INSERT INTO erl67is1017.todolist (description, fk_id) VALUES (?, ?)");
				stmt.setString(1, item.getDescription());
				stmt.setInt(2, parentid);
				stmt.executeUpdate();

				//Assign taskID to class manually because we need to wait for the database to assign an ID, otherwise FK conflicts and auto-increment errors will snowball  
				int id = getmaxID();
				item.setId(id);

				//Assign user to task and store in junction table with newly gotten task ID
				PreparedStatement stmt2 = con.prepareStatement("INSERT INTO erl67is1017.user_todo (fk_todo_id, fk_user_id) VALUES (?,?)");
				stmt2.setInt(1, id); 
				stmt2.setInt(2, user.getId());
				stmt2.executeUpdate();

				System.out.println(stmt.toString().substring(47) + "   " + stmt2.toString().substring(47));	//substringed to hide extra JDBC data
				stmt.close(); stmt2.close();
				
				for (ListItem mapitem: taskMap.keySet()){
					if (mapitem.getId() == parentid) {
						item.setDescription("     " + item.getDescription() + " [subtask of: " + mapitem.getDescription().trim() +"]");
						item.setParent(mapitem);
						mapitem.addChild(item);
						int idx = View.getListModel().indexOf(mapitem);
						View.getListModel().insertElementAt(item, idx+1);
						System.out.println(item + " parent= " + mapitem);
					}		
				}	

				taskMap.put(item, user);

				//because I wanted the listmodel to also show the user, the listitem displayed is slightly different than the one in the map, it is constructed as below
				//this also creates an inability to directly compare things from the list to the hashmap, so the ID should be the main way to verify the task
				//View.getListModel().addElement(new ListItem(item.getDescription() + "       [" + taskMap.get(item).lastDotF() + "] ",item.getId(), item.getTimestamp()));
				View.getJtfInput().setText("");
				System.out.println("Item Added");
			}
			catch (MySQLIntegrityConstraintViolationException f) {
				System.out.println("Duplicate item, unable to add"); //f.printStackTrace();
				JOptionPane.showMessageDialog(View.getCboUser(),
						"This task is already in the list",
						"Try Again",
						JOptionPane.ERROR_MESSAGE);
			}
			catch (SQLException e) {
				System.out.println("SQL error"); e.printStackTrace();
			}
		} else {	//if task has no parent
			try {
				//Enter task into todolist table
				PreparedStatement stmt = con.prepareStatement("INSERT INTO erl67is1017.todolist (description) VALUES (?)");
				stmt.setString(1, item.getDescription());
				stmt.executeUpdate();

				//Assign taskID to class manually because we need to wait for the database to assign an ID, otherwise FK conflicts and auto-increment errors will snowball  
				int id = getmaxID();
				item.setId(id);

				//Assign user to task and store in junction table with newly gotten task ID
				PreparedStatement stmt2 = con.prepareStatement("INSERT INTO erl67is1017.user_todo (fk_todo_id, fk_user_id) VALUES (?,?)");
				stmt2.setInt(1, id); 
				stmt2.setInt(2, user.getId());
				stmt2.executeUpdate();

				System.out.println(stmt.toString().substring(47) + "   " + stmt2.toString().substring(47));	//substringed to hide extra JDBC data
				stmt.close(); stmt2.close();

				taskMap.put(item, user);

				//View.getListModel().addElement(new ListItem(item.getDescription() + "       [" + taskMap.get(item).lastDotF() + "] ",item.getId(), item.getTimestamp()));
				View.getJtfInput().setText("");
				View.getListModel().addElement(item);
				System.out.println("Item Added");
			}
			catch (MySQLIntegrityConstraintViolationException f) {
				System.out.println("Duplicate item, unable to add"); //f.printStackTrace();
				JOptionPane.showMessageDialog(View.getCboUser(),
						"This task is already in the list",
						"Try Again",
						JOptionPane.ERROR_MESSAGE);
			}
			catch (SQLException e) {
				System.out.println("SQL error"); e.printStackTrace();
			}
		}
	}

	public static void deleteListItem(ListItem item) {
		int id = View.getListModel().elementAt(View.getList1().getSelectedIndex()).getId();
		//need to cycle through the hashmap, because no way to tell which key has the same ID as the ListModel item
		for (ListItem mapitem: taskMap.keySet()){
			if (mapitem.getId() == item.getId()) {
				try {
					PreparedStatement stmt = con.prepareStatement("DELETE FROM erl67is1017.user_todo WHERE fk_todo_id=?");
					PreparedStatement stmt2 = con.prepareStatement("DELETE FROM erl67is1017.todolist WHERE todolist.id=?");
					stmt.setInt(1, id);   
					stmt2.setInt(1, id);
					System.out.println(stmt.toString().substring(47) + "   " + stmt2.toString().substring(47));		//substring to hide JDBC class junk
					stmt.executeUpdate();
					stmt2.executeUpdate();
					stmt.close(); stmt2.close();
					taskMap.remove(mapitem);
					View.getListModel().removeElement(item);
					item.getParent().removeChild(item);
					//System.out.println("Item deleted");
				}
				catch (MySQLIntegrityConstraintViolationException f) {
					JOptionPane.showMessageDialog(View.getList1(),
							"Cannot delete parent tasks without completing or removing subtasks",
							"Error",
							JOptionPane.ERROR_MESSAGE);
							//f.printStackTrace();
				}
				catch (SQLException e) {
					System.out.println("Item not available");  e.printStackTrace();
				}
				break;	//must break the for loop once something is removed or it will give an index error
			}		
		}	
	}

	/**
	 * @return int of the last entered task row
	 * this was required because the database rejects previous numbers even if they were deleted
	 * therefore it is impossible to assign a task ID unless the database assigns it (may have been simpler to turn off auto-increment and leave unique)
	 */
	public static int getmaxID() {
		int i = 0;
		try {
			PreparedStatement st = con.prepareStatement("SELECT LAST_INSERT_ID();");
			ResultSet rs = st.executeQuery();
			rs.next();
			i = rs.getInt(1);
			rs.close(); st.close();
		} catch (SQLException e) {
			e.printStackTrace();
		} 			
		return i;	
	}

	/**
	 * @param user
	 * Show tasks assigned to a single user
	 */
	public static void filterUsers(UserItem user) {
		View.getListModel().clear();
		if (user==null) {	//if the blank is selected it will repopulate everyone
			reset();
//			for (ListItem item: taskMap.keySet()){
//				View.getListModel().addElement(new ListItem(item.getDescription() + "       [" + taskMap.get(item).lastDotF() + "] ",item.getId(), item.getTimestamp()));			
//			}
		} else {	//cycle through the hashmap and only add the items where the value is equal to selected user
			for (ListItem item: taskMap.keySet()){
				if (taskMap.get(item) == user) {
					View.getListModel().addElement(item);
				}		
			}
		}
	}

	/**
	 * Clear the hashmap and recheck the database, provides a way to undo filtering view and check for bugs
	 */
	public static void reset() {
		taskMap.clear();
		pullDbTasks (con);	
	}
	
	public static HashMap<ListItem, UserItem> getTaskList() {
		return taskMap;
	}

	public static HashMap<Integer, UserItem> getUserList() {
		return userMap;
	}

	/**
	 * Not used
	 */
	public static void closeDB(){
		try {
			con.close();
			System.out.println(con.toString() +" "+ con.isClosed());
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
}
